import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

public class BlockChainDriver {
	public static void main(String[] args) throws NoSuchAlgorithmException {	
        if (args.length != 1) {throw new IllegalArgumentException("Number of Arguments should be one.");} //throws an exception if the user has inputed more or less arguments than expected
		try { //throws an exception if the input is not an integer
			Integer.parseInt(args[0]);
		}
		catch (NumberFormatException ex){
			throw new NumberFormatException("Your agrument should be an integer.");
		}	
		int initial = Integer.parseInt(args[0]); //converts the string value into an integer to use it to create the initial block
		if (initial < 0) {throw new IllegalArgumentException("Initial value should be positive."); //if the amount of the initial block is negative, throw an exception
		}
		else {
			BlockChain blockChain = new BlockChain(initial); //if all the exceptions and errors are handled, then create the first block of the block chain using the given amount
			Scanner s = new Scanner(System.in); //initializing a scanner to take inputs from the user from the console
			while(true) { //runs an infinite loop until the user wants to quit
                System.out.println(blockChain.toString()); //prints out all data of all blocks in the block chain
			    System.out.print("Command? "); //prompt to user to input a command
			    String input = s.next(); //reads the next word input
			    if (input.equalsIgnoreCase("mine")) { //runs the block if user inputs "mine"
				    System.out.print("Amount Transferred? "); //prompt for user to input amount to be transferred
				    int amount = s.nextInt(); //reads the amount as an integer
				    Block block = new Block(blockChain.size, amount, blockChain.last.block.hash); //generates a block with a random valid nonce value
				    System.out.println("amount = " + amount + ", nonce = " + block.nonce); //prints the amount and nonce of the generated block
			    }
			    else if (input.equalsIgnoreCase("append")) { //runs the block if user inputs "append"
				    System.out.print("Amount Transferred? "); //prompt for user to input amount to be transferred
			        int amount = s.nextInt(); //reads the amount as an integer
			        System.out.print("Nonce? "); //prompt for user to input nonce generated by mining 
			        long nonce = s.nextLong(); //reads the nonce as a long value
			        Block block = new Block(blockChain.size, amount, blockChain.last.block.hash, nonce); //creates a block with the data inputed
			        blockChain.append(block); //add the block to the block chain by calling its append method
			    }
			    else if (input.equalsIgnoreCase("remove")) { //runs the block if user inputs "remove"
				    blockChain.removeLast(); //calls the removeLast method of blockChain to remove the last block of the block chain 
			    }
			    else if (input.equalsIgnoreCase("check")) { //runs the block if user inputs "check"
				    if (blockChain.isValidBlockChain()) {System.out.println("Chain is valid!");} //call the isValidBlockChain to check if the block chain is valid and consistent
				    else { //if the block chain is not valid run the else block
					    System.out.println("Chain is invalid!"); //print that the chain is invalid
				    }
			    }
			    else if (input.equalsIgnoreCase("report")) { //runs the block if user inputs "report"
				    blockChain.printBalances(); //print the balances of Alice and bob
			    }
			    else if (input.equalsIgnoreCase("help")) { //runs the block if user inputs "help"
				    System.out.println("Valid commands: "); 
				    System.out.println("    mine: discovers the nonce for a given transaction");
				    System.out.println("    append: appends a new block onto the end of the chain");
				    System.out.println("    remove: removes the last block from the end of the chain");
				    System.out.println("    check: checks that the block chain is valid");
				    System.out.println("    report: reports the balances of Alice and Bob");
				    System.out.println("    help: prints this list of commands");
				    System.out.println("    quit: quits the program");
			    }
			    else if (input.equalsIgnoreCase("quit")) { //if the user inputs "quit" quit the program
				    return;
			    }
			    else {
				    System.out.println("Please input valid commands. 'help' will list valid commands."); //if the user does not input a valid command, print this
			    }
			}
		}
	}
}
